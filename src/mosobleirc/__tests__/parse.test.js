import { describe, it } from 'node:test';
import { resolve } from 'node:path';
import { readFileSync } from 'fs';
import assert from 'node:assert';
import { parseCharges } from '../parse.js';

const mosoblEircInvoiceMock = JSON.parse(readFileSync(resolve(import.meta.dirname, './mosobleirc_invoice.json'), 'utf-8'));

describe('mosobleirc', () => {
  describe('parseCharges with mock data', () => {
    it('should get invoice value from mock PDF data', async () => {
      // Create mock charge data that would be extracted from the PDF
      const mockChargeData = {
        chargeDetails: [
          { nm_service: '–í–û–î–û–û–¢–í–ï–î–ï–ù–ò–ï', sm_total: '398,78' },
          { nm_service: '–ì–û–†–Ø–ß–ï–ï –í/–° (–ù–û–°–ò–¢–ï–õ–¨)', sm_total: '141,32' },
          { nm_service: '–ì–û–†–Ø–ß–ï–ï –í/–° (–≠–ù–ï–†–ì–ò–Ø)', sm_total: '561,70' },
          { nm_service: '–•–û–õ–û–î–ù–û–ï –í/–°', sm_total: '227,65' },
          { nm_service: '–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û –î–ï–ù–¨ –î–í–£–•–¢–ê–†–ò–§–ù–´–ô –ü–£ (–î1)', sm_total: '802,26' },
          { nm_service: '–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û –ù–û–ß–¨ –î–í–£–•–¢–ê–†–ò–§–ù–´–ô –ü–£ (–î1)', sm_total: '0,00' },
          { nm_service: '–ó–ê–ü–ò–†–ê–Æ–©–ï–ï –£–°–¢–†–û–ô–°–¢–í–û', sm_total: '46,01' },
          { nm_service: '–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–ò–î–ï–û–ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø', sm_total: '79,55' },
          { nm_service: '–°–û–î–ï–†–ñ–ê–ù–ò–ï –ñ–ò–õ–û–ì–û –ü–û–ú–ï–©–ï–ù–ò–Ø', sm_total: '1166,43' },
          { nm_service: '–û–¢–û–ü–õ–ï–ù–ò–ï –ö–ü–£', sm_total: '0,00' }
        ]
      };

      const result = await parseCharges(mockChargeData);
      assert.strictEqual(result.length, 5);
      assert.strictEqual(result[0].value, 1329.45);
      assert.strictEqual(result[1].value, 802.26);
      assert.strictEqual(result[2].value, 125.56);
      assert.strictEqual(result[3].value, 1166.43);
      assert.strictEqual(result[4].value, 0.00);

      assert.strictEqual(result[4].text, 'üî•: 0.00 ‚ÇΩ');
    });
  });

  describe('parseCharges with JSON dump data', () => {
    it('should extract correct charge data from JSON dump strings', async () => {
      // Simulate what parsePdfToChargeData would extract from the JSON dump
      // by manually creating the charge details that would be found in the JSON strings
      const mockChargeDataFromJsonDump = {
        chargeDetails: [
          { nm_service: '–í–û–î–û–û–¢–í–ï–î–ï–ù–ò–ï', sm_total: '398,78' },
          { nm_service: '–ì–û–†–Ø–ß–ï–ï –í/–° (–ù–û–°–ò–¢–ï–õ–¨)', sm_total: '141,32' },
          { nm_service: '–ì–û–†–Ø–ß–ï–ï –í/–° (–≠–ù–ï–†–ì–ò–Ø)', sm_total: '561,70' },
          { nm_service: '–•–û–õ–û–î–ù–û–ï –í/–°', sm_total: '227,65' },
          { nm_service: '–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û –î–ï–ù–¨ –î–í–£–•–¢–ê–†–ò–§–ù–´–ô –ü–£ (–î1)', sm_total: '802,26' },
          { nm_service: '–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û –ù–û–ß–¨ –î–í–£–•–¢–ê–†–ò–§–ù–´–ô –ü–£ (–î1)', sm_total: '0,00' },
          { nm_service: '–ó–ê–ü–ò–†–ê–Æ–©–ï–ï –£–°–¢–†–û–ô–°–¢–í–û', sm_total: '46,01' },
          { nm_service: '–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–ò–î–ï–û–ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø', sm_total: '79,55' },
          { nm_service: '–°–û–î–ï–†–ñ–ê–ù–ò–ï –ñ–ò–õ–û–ì–û –ü–û–ú–ï–©–ï–ù–ò–Ø', sm_total: '1166,43' },
          { nm_service: '–û–¢–û–ü–õ–ï–ù–ò–ï –ö–ü–£', sm_total: '0,00' }
        ]
      };

      const result = await parseCharges(mockChargeDataFromJsonDump);
      
      // Verify the parsing results match expected values from the JSON dump
      assert.strictEqual(result.length, 5);
      assert.strictEqual(result[0].value, 1329.45); // Water services: 398.78 + 141.32 + 561.70 + 227.65
      assert.strictEqual(result[1].value, 802.26);  // Electricity: 802.26 + 0.00
      assert.strictEqual(result[2].value, 125.56);  // Domofon services: 46.01 + 79.55
      assert.strictEqual(result[3].value, 1166.43); // Maintenance: 1166.43
      assert.strictEqual(result[4].value, 0.00);    // Heating: 0.00

      // Check text formatting includes intermediate values
      assert.strictEqual(result[0].text, 'üíß: 1329.45 ‚ÇΩ\n(398.78 + 141.32 + 561.7 + 227.65)');
      assert.strictEqual(result[1].text, '‚ö°Ô∏è: 802.26 ‚ÇΩ\n(802.26 + 0)');
      assert.strictEqual(result[2].text, 'üìûÔ∏è: 125.56 ‚ÇΩ\n(46.01 + 79.55)');
      assert.strictEqual(result[3].text, 'üèöÔ∏èÔ∏è: 1166.43 ‚ÇΩ');
      assert.strictEqual(result[4].text, 'üî•: 0.00 ‚ÇΩ');
    });

    it('should verify JSON dump contains expected service data', () => {
      // Verify that the JSON dump contains the expected service names and amounts
      // This ensures our mock data is realistic and contains the right structure
      
      // Check for water services
      assert.ok(mosoblEircInvoiceMock.includes('–í–û–î–û–û–¢–í–ï–î–ï–ù–ò–ï'));
      assert.ok(mosoblEircInvoiceMock.includes('–ì–û–†–Ø–ß–ï–ï –í/–° (–ù–û–°–ò–¢–ï–õ–¨)'));
      assert.ok(mosoblEircInvoiceMock.includes('–ì–û–†–Ø–ß–ï–ï –í/–° (–≠–ù–ï–†–ì–ò–Ø)'));
      assert.ok(mosoblEircInvoiceMock.includes('–•–û–õ–û–î–ù–û–ï –í/–°'));
      
      // Check for electricity services
      assert.ok(mosoblEircInvoiceMock.includes('–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û –î–ï–ù–¨'));
      assert.ok(mosoblEircInvoiceMock.includes('–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û –ù–û–ß–¨'));
      
      // Check for domofon services
      assert.ok(mosoblEircInvoiceMock.includes('–ó–ê–ü–ò–†–ê–Æ–©–ï–ï –£–°–¢–†–û–ô–°–¢–í–û'));
      assert.ok(mosoblEircInvoiceMock.includes('–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´'));
      assert.ok(mosoblEircInvoiceMock.includes('–í–ò–î–ï–û–ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø'));
      
      // Check for maintenance services
      assert.ok(mosoblEircInvoiceMock.includes('–°–û–î–ï–†–ñ–ê–ù–ò–ï –ñ–ò–õ–û–ì–û –ü–û–ú–ï–©–ï–ù–ò–Ø'));
      
      // Check for heating services
      assert.ok(mosoblEircInvoiceMock.includes('–û–¢–û–ü–õ–ï–ù–ò–ï –ö–ü–£'));
      
      // Check for expected amounts (these should be found in the JSON)
      assert.ok(mosoblEircInvoiceMock.includes('398,78'));
      assert.ok(mosoblEircInvoiceMock.includes('802,26'));
      assert.ok(mosoblEircInvoiceMock.includes('1 166,43')); // Note: has space in JSON
      
      // Verify private data has been cleaned up
      assert.ok(mosoblEircInvoiceMock.includes('[–ò–ú–Ø] [–§–ê–ú–ò–õ–ò–Ø] [–û–¢–ß–ï–°–¢–í–û]'));
      assert.ok(mosoblEircInvoiceMock.some(item => item.includes('–£–õ [–£–õ–ò–¶–ê]')));
      assert.ok(mosoblEircInvoiceMock.some(item => item.includes('–¥.[–ù–û–ú–ï–†_–î–û–ú–ê]')));
      assert.ok(mosoblEircInvoiceMock.some(item => item.includes('–∫–≤.[–ù–û–ú–ï–†_–ö–í–ê–†–¢–ò–†–´]')));
    });
  });
});
